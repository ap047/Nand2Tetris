// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).
    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //First Mux
    Mux16(a=instruction, b=ALUo, sel=instruction[15], out=O1);

    //A Reg stuff
    Mux(a=true, b=instruction[5], sel=instruction[15], out=ALoad);
    ARegister(in=O1, load=ALoad, out=O2, out[0..14]=addressM); //A reg

    //ALU C's Mux
    Mux(a=false, b=instruction[12], sel=instruction[15], out=B4ALU);

    //ALU in 1 MUX
    Mux16(a=O2, b=inM, sel=B4ALU, out=ALUin2);

    //ALU
    ALU(x=ALUin1, y=ALUin2, zx=instruction[11], nx=instruction[10], zy=instruction[9] , ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUo, out=outM, zr=zr, ng=ng);

    //D Reg Stuff
    Mux(a=false, b=instruction[4], sel=instruction[15], out=DLoad); 
    DRegister(in=ALUo, load=DLoad, out=ALUin1); //D reg

    //WriteM
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);

    //PC
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);

    //if j1 = 0
    And(a=notng, b=notzr, out=b1);
    Mux(a=false, b=b1, sel=instruction[0], out=g1);
    Mux(a=zr, b=notng, sel=instruction[0], out=g2);
    Mux(a=g1, b=g2, sel=instruction[1], out=h1);

    //if j1 = 1
    Mux(a=ng, b=notzr, sel=instruction[0], out=g3);
    Or(a=ng, b=zr, out=b2);
    Mux(a=b2, b=true, sel=instruction[0], out=g4);
    Mux(a=g3, b=g4, sel=instruction[1], out=h2);
    
    Mux(a=h1, b=h2, sel=instruction[2], out=jload);

    Mux(a=false, b=jload, sel=instruction[15], out=PCload);

    PC(in=O2, load=PCload, inc=true, reset=reset, out[0..14]=pc);

    
}